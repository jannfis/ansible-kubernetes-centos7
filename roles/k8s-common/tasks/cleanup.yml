- name: Run kubeadm reset
  command: kubeadm reset -f
  ignore_errors: true

- name: Ensure all services are stopped
  service:
    name: "{{ item }}"
    state: stopped
    enabled: false
  with_items:
    - docker
    - kubelet
  ignore_errors: true

- name: Ensure all Kubernetes packages are deinstalled
  yum:
    name: [ docker, kubelet, kubectl, kubeadm ]
    state: absent

- name: Remove kube user
  user:
    name: "{{ kubernetes.cluster.k8s_user.username }}"
    state: absent

- name: Remove kube group
  group:
    name: "{{ kubernetes.cluster.k8s_user.group }}"
    state: absent

- name: Remove kube home directory
  file:
    path: "/home/{{ kubernetes.cluster.k8s_user.username }}"
    state: absent

- name: Remove kubernetes configuration directory
  file:
    path: /etc/kubernetes
    state: absent

- name: Unmount all overlays
  command: umount -t overlay -a

- name: Remove state files and all Kubernetes runtime directories
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /root/cluster_initialized.txt
    - /root/node_joined.txt
    - /var/lib/docker
    - /var/lib/dockershim
    - /var/lib/etcd/*
    - /var/lib/kubelet

- name: Reload systemctl daemon
  command: systemctl daemon-reload

- name: Reboot system
  reboot:
    post_reboot_delay: 30
  when: reboot is defined

# Below tasks should be used very carefully. They are only enabled if Gluster
# feature is turned on and cleanup_storage is true.

- name: Figure out which VGs to remove
  shell: "vgs --no-headings -S pv_name={{ kubernetes.features.glusterfs.device }} | awk '{ print $1 }'"
  register: glusterfs_vg
  when: 
    - "kubernetes.cluster.feature_toggles.glusterfs"
    - "'kubernetes-worker' in group_names"
    - "cleanup_storage is defined"

- name: Remove all Logical Volumes
  command: "lvremove -f -y {{ item }}"
  with_items:
    - "{{ glusterfs_vg.stdout_lines }}"
  when: 
    - "kubernetes.cluster.feature_toggles.glusterfs"
    - "'kubernetes-worker' in group_names"
    - "cleanup_storage is defined"

- name: Remove all Volume Groups
  command: "vgremove -f -y {{ item }}"
  with_items:
    - "{{ glusterfs_vg.stdout_lines }}"
  register: vgs_removed
  when: 
    - "kubernetes.cluster.feature_toggles.glusterfs"
    - "'kubernetes-worker' in group_names"
    - "cleanup_storage is defined"

- name: Remove Physical Volume
  command: "pvremove -y {{ kubernetes.features.glusterfs.device }}"
  when: 
    - "kubernetes.cluster.feature_toggles.glusterfs"
    - "'kubernetes-worker' in group_names"
    - "cleanup_storage is defined"
    - "vgs_removed is changed"
